const beautify = require('js-beautify').js;
const fs = require('fs');
const { transform } = require('lebab');

/**
 * First letter capitalization, utility function
 * @param string
 * @returns {string}
 */
function capitalize(string) {
  return string[0].toUpperCase() + string.slice(1);
}

/**
 * Split the code to create multiple files and directories
 * @param {string} source - source code generated by swagger-js-codegen (using special templates!)
 * @param {string} className - specified class name
 * @returns {array} - array of objects (files and wrapper)
 */
async function split(source, className) {
  try {
    // convert ES5 to ES6
    const { code, warnings } = transform(source, ['let', 'arrow', 'arrow-return', 'class']);

    // show conversion errors and warnings
    if (warnings && warnings.length && warnings.length > 0) {
      console.log('> codegen-splitter @ ES6 conversion warnings:\n', warnings);
    }

    // create the source file TODO: better understanding of the file placement
    fs.writeFileSync(`${__dirname}/source.js`, code, (err) => {
      if (err) {
        throw new Error(err);
      }
    });

    // load source file and get all of the available methods from the class
    console.log('> various', `${__dirname}/source.js`, `${capitalize(className.toLowerCase())}`);
    const Instance = require(`${__dirname}/source.js`)[`${capitalize(className.toLowerCase())}`];
    console.log('> ins', Instance);
    const methods = Object.getOwnPropertyNames(Instance.prototype).filter(m => m !== 'constructor');

    // abort everything if there are no methods (i. e. incorrect JSON or something went wrong)
    if (methods.length === 0) {
      return console.log('> Methods not found');
    }

    // create new instance of the class, use it as a provider of the code
    const provider = new Instance();

    // process all of the methods, store code in array
    const destinations = [];
    methods.forEach((method) => {
      let standalone = provider[method].toString();
      let functionName = standalone.split('(req, res)')[0];
      const destination = functionName.split('_')[0];
      functionName = functionName.split('_')[1];
      standalone = `async function ${functionName}(req, res) ${standalone.split('(req, res)')[1]}`;
      destinations.push({
        content: standalone,
        file: destination,
        function: functionName,
      });
    });

    // create file list
    const files = [];
    destinations.forEach((f) => {
      if (!files.some(entry => entry.file === f.file)) {
        files.push({
          content: '',
          file: f.file,
          functions: [],
        });
      }
    });

    // building the controllers
    files.forEach((file, i) => {
      destinations.forEach((d) => {
        if (file.file === d.file) {
          files[i].content = `${files[i].content}
        
            ${d.content}`;
          files[i].functions.push(d.function);
        }
      });
    });

    // add 'use strict' and exporting
    files.forEach((file, i) => {
      let fList = '';
      file.functions.forEach((f) => {
        fList = `${fList}
          ${f},`;
      });
      files[i].content = beautify(`'use strict';

      /* auto-generated: ${file.file}.controller.js */
      ${file.content}

      module.exports = {
        ${fList}
      };`, { indent_size: 2 });
    });

    // delete the source file TODO: better understanding of the file placement
    await fs.unlink(`${__dirname}/source.js`, (err) => {
      if (err) {
        throw new Error(err);
      }
    });

    // create API wrapper TODO: what should be inside of the wrapper? What to export?
    let wrapperContent = '';
    files.forEach((file) => {
      const name = file.file;
      wrapperContent = `${wrapperContent}
        const ${name} = require('./${name}/${name}.controller.js');`;
    });
    const wrapper = {
      content: beautify(wrapperContent, { indent_size: 2 }),
      directory: null,
      file: 'index.js', // TODO: wrapper name?
      isWrapper: true,
    };

    // finalize and return
    files.forEach((file, i) => {
      files[i].directory = file.file;
      files[i].file = `${file.file}.controller.js`;
      files[i].isWrapper = false;
    });
    files.push(wrapper);

    return files;
  } catch (err) {
    console.log('> err', err);
    throw new Error(err);
  }
}

module.exports = {
  split,
};
